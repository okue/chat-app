port module Main exposing (main)

import Bootstrap.Table as Table
import Browser
import Browser.Dom as Dom
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (onClick, onInput)



-------------------------------------------------------------------------------
--                               Port
-------------------------------------------------------------------------------


port sendMsg : ( String, String ) -> Cmd msg


port receiveMsgs : (Message -> msg) -> Sub msg



-------------------------------------------------------------------------------
--                               Types
-------------------------------------------------------------------------------


type alias Model =
    { messagesList : List Message
    , currentTo : User
    , currentContent : String
    , myname : String
    }


type Msg
    = ChangedTo User
    | ChangedContent String
    | ClickedPost
    | ClickedDelete Id
    | ReceiveMsgs Message


type alias Flags =
    { myname : String }


type alias Message =
    { from : String
    , to : String
    , content : String
    }


type alias Id =
    Int


type alias User =
    String



-------------------------------------------------------------------------------
--                               Main Functions
-------------------------------------------------------------------------------


main : Program Flags Model Msg
main =
    Browser.document
        { init = init
        , view = view
        , update = update
        , subscriptions = subscriptions
        }


init : Flags -> ( Model, Cmd Msg )
init flags =
    let
        model =
            { messagesList = []
            , currentTo = ""
            , currentContent = ""
            , myname = flags.myname
            }
    in
    ( model
    , Cmd.none
    )


view : Model -> Browser.Document Msg
view model =
    { title = model.myname ++ "のチャット"
    , body = mainBody model
    }


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    -- Debug.log ("update is called, " ++ Debug.toString msg) <|
    case msg of
        ChangedContent content ->
            ( { model | currentContent = content }, Cmd.none )

        ChangedTo to ->
            ( { model | currentTo = to }, Cmd.none )

        ClickedPost ->
            let
                newMsg =
                    -- FIXME: $myname to random string generated by js
                    { from = model.myname, to = model.currentTo, content = model.currentContent }
            in
            ( { model | currentTo = "", currentContent = "", messagesList = newMsg :: model.messagesList }
            , sendMsg ( model.currentTo, model.currentContent )
            )

        ClickedDelete i ->
            ( model, Cmd.none )

        ReceiveMsgs m ->
            let
                newMsg =
                    { from = m.from, to = m.to, content = m.content }
            in
            ( { model | messagesList = newMsg :: model.messagesList }
            , Cmd.none
            )


subscriptions : Model -> Sub Msg
subscriptions model =
    receiveMsgs ReceiveMsgs



-------------------------------------------------------------------------------
--                               Sub Functions
-------------------------------------------------------------------------------


mainBody : Model -> List (Html Msg)
mainBody model =
    [ textBox model
    , msgTable model
    ]


msgTable model =
    let
        textColor color x =
            if x == model.myname then
                div [ style "color" color ] [ text x ]

            else
                text x

        toTalkCol message =
            Table.tr []
                [ Table.td [] [ textColor "red" message.from ]
                , Table.td [] [ textColor "blue" message.to ]
                , Table.td [] [ text message.content ]
                ]
    in
    Table.simpleTable
        ( Table.simpleThead
            [ Table.th [] [ text "from" ]
            , Table.th [] [ text "to" ]
            , Table.th [] [ text "content" ]
            ]
        , Table.tbody [] <| List.map toTalkCol model.messagesList
        )


textBox : Model -> Html Msg
textBox model =
    div []
        [ viewInput "text" "to" model.currentTo ChangedTo
        , viewInput "text" "content" model.currentContent ChangedContent
        , button [ onClick ClickedPost ] [ text "post" ]
        ]


viewInput : String -> String -> String -> (String -> msg) -> Html msg
viewInput t p v toMsg =
    input [ type_ t, placeholder p, value v, onInput toMsg ] []
